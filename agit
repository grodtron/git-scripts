#!/bin/bash

# Script to automate my git workflow.
#
# Goes through all modified, untracked and deleted files, and
# interactively asks what action to take on them, then asks to
# commit the staged changes

# make sure we're actually in a git repo.
git status >/dev/null || exit 1

gitroot=$(git rev-parse --show-toplevel)
olddir=$(pwd)

cd $gitroot

# Untracked files
for file in $( git status --porcelain | sed -nr 's/^\?\? (.*)$/\1/ p' )
do
	clear
	rts $file >/dev/null 2>&1

	while true
	do
		echo -en "\n\nadd untracked file '$file'? (y[es]/n[o]/d[elete it]/a[dd to .gitignore]): "
		read command
		if [ "$command" == 'y' ]
		then
			echo
			rts $file
			git add $file
			break
		elif [ "$command" == 'n' ]
		then
			break
		elif [ "$command" == 'd' ]
		then
			echo
			rm -rI $file
			break
      elif [ "$command" == 'a' ]
      then
         echo $file >> .gitignore
         break
		else
			echo "Invalid command '$command'"
		fi
	done
done

# Deleted files
for file in $( git status --porcelain | sed -nr 's/^ D (.*)$/\1/ p' )
do
	clear
	while true
	do
		echo -en "\n\nRemoved deleted file: '$file'? (y[es]/n[o]): "
		read command
		if [ "$command" == 'y' ]
		then
			echo
			git rm $file
			break
		elif [ "$command" == 'n' ]
		then
			break
		else
			echo "Invalid command '$command'"
		fi
	done
done

# Modified files
for file in $( git status --porcelain | sed -nr 's/^[ AM]M (.*)$/\1/ p' )
do
	rts $file >/dev/null 2>&1
	command=r
	while [ "$command" == r ]
	do
		clear
		echo -e "Diffing $file:\n\n"
		git diff $file
		# rediffing allows the file to be edited in the meantime

		while true
		do
			echo -n "add file? (y[es]/n[o]/p[atch]/r[ediff]/c[checkout -- <file>]/s[hell]): "
			read command

			if [ "$command" == 'y' ]
			then
				echo
				git add $file
				break
			elif [ "$command" == 'n' ]
			then
				break
			elif [ "$command" == 'p' ]
			then
				echo
				git add -p $file
				break
			elif [ "$command" == 'r' ]
			then
				break
			elif [ "$command" == 'c' ]
			then
				echo
				git checkout -- $file
				break
			elif [ "$command" == 's' ]
			then
				echo
				bash
				# do not break out of the loop after this!
			else
				echo "Invalid command '$command'"
			fi
		done
	done
done


clear
git status

if git diff-index --quiet HEAD --
then
   echo "Nothing to commit"
else
   while true
   do
      echo -en "\n\nCommit? (y[es]/n[o]/a[mend]/r[eset HEAD]): "
      read command
      if [ "$command" == 'y' ]
      then
         echo
         git commit
         #If user decide to commit he maybe want to push also
         echo -en "\n\nPush? (y[es]/n[o]): "
         read command
            if [ "$command" == 'y' ]
            then
               echo
               git push
               break
            elif [ "$command" == 'n' ]
            then
               break
            else
               echo "invalid command '$command'"
            fi

         break
      elif [ "$command" == 'n' ]
      then
         break
      elif [ "$command" == 'a' ]
      then
         echo
         git commit --amend
         break
      elif [ "$command" == 'r' ]
      then
         echo
         git reset HEAD
         break
      else
         echo "Invalid command '$command'"
      fi
   done
fi

cd $olddir
